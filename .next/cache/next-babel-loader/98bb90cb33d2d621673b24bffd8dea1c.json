{"ast":null,"code":"import Unit from '../../../models/unit.model';\nexport default (async (req, res) => {\n  try {\n    var date = new String(req.query.date);\n    date = new Date(date.toString());\n    var [opening, sold, closing, received, transactionTypes, checkpoints, financeNames, saleTypes, counterSold, networkSold] = await Promise.all([Unit.aggregate([{\n      $match: {\n        entryDate: {\n          $lt: date\n        },\n        $or: [{\n          saleDate: {\n            $exists: false\n          }\n        }, {\n          saleDate: {\n            $gte: date\n          }\n        }]\n      }\n    }, {\n      $group: {\n        _id: {\n          model: '$model',\n          color: '$color'\n        },\n        count: {\n          $sum: 1\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          model: '$_id.model'\n        },\n        count: {\n          $sum: '$count'\n        },\n        colors: {\n          $push: {\n            color: '$_id.color',\n            count: '$count'\n          }\n        }\n      }\n    }]), Unit.aggregate([{\n      $match: {\n        saleDate: date\n      }\n    }, {\n      $group: {\n        _id: {\n          model: '$model',\n          color: '$color'\n        },\n        count: {\n          $sum: 1\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          model: '$_id.model'\n        },\n        count: {\n          $sum: '$count'\n        },\n        colors: {\n          $push: {\n            color: '$_id.color',\n            count: '$count'\n          }\n        }\n      }\n    }]), Unit.aggregate([{\n      $match: {\n        entryDate: {\n          $lte: date\n        },\n        $or: [{\n          saleDate: {\n            $exists: false\n          }\n        }, {\n          saleDate: {\n            $gt: date\n          }\n        }]\n      }\n    }, {\n      $group: {\n        _id: {\n          model: '$model',\n          color: '$color'\n        },\n        count: {\n          $sum: 1\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          model: '$_id.model'\n        },\n        count: {\n          $sum: '$count'\n        },\n        colors: {\n          $push: {\n            color: '$_id.color',\n            count: '$count'\n          }\n        }\n      }\n    }]), Unit.aggregate([{\n      $match: {\n        entryDate: date\n      }\n    }, {\n      $group: {\n        _id: {\n          model: '$model',\n          color: '$color'\n        },\n        count: {\n          $sum: 1\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          model: '$_id.model'\n        },\n        count: {\n          $sum: '$count'\n        },\n        colors: {\n          $push: {\n            color: '$_id.color',\n            count: '$count'\n          }\n        }\n      }\n    }]), Unit.aggregate([{\n      $match: {\n        saleDate: date,\n        transactionType: {\n          $nin: [null, \"\"]\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          transactionType: \"$transactionType\"\n        },\n        count: {\n          $sum: 1\n        }\n      }\n    }]), Unit.aggregate([{\n      $match: {\n        saleDate: date,\n        checkpoint: {\n          $nin: [null, \"\"]\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          checkpoint: \"$checkpoint\"\n        },\n        count: {\n          $sum: 1\n        }\n      }\n    }]), Unit.aggregate([{\n      $match: {\n        saleDate: date,\n        financeName: {\n          $nin: [null, \"\"]\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          financeName: \"$financeName\"\n        },\n        count: {\n          $sum: 1\n        }\n      }\n    }]), Unit.aggregate([{\n      $match: {\n        saleDate: date\n      }\n    }, {\n      $group: {\n        _id: {\n          saleType: \"$saleType\"\n        },\n        count: {\n          $sum: 1\n        }\n      }\n    }]), Unit.aggregate([{\n      $match: {\n        saleDate: date,\n        saleType: \"Counter\"\n      }\n    }, {\n      $group: {\n        _id: {\n          model: '$model',\n          color: '$color'\n        },\n        count: {\n          $sum: 1\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          model: '$_id.model'\n        },\n        count: {\n          $sum: '$count'\n        },\n        colors: {\n          $push: {\n            color: '$_id.color',\n            count: '$count'\n          }\n        }\n      }\n    }]), Unit.aggregate([{\n      $match: {\n        saleDate: date,\n        saleType: \"Network\"\n      }\n    }, {\n      $group: {\n        _id: {\n          checkpoint: \"$checkpoint\",\n          color: \"$color\",\n          model: \"$model\"\n        },\n        count: {\n          $sum: 1\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          checkpoint: \"$_id.checkpoint\",\n          model: \"$_id.model\"\n        },\n        count: {\n          $sum: \"$count\"\n        },\n        colors: {\n          $push: {\n            color: '$_id.color',\n            count: '$count'\n          }\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          checkpoint: \"$_id.checkpoint\"\n        },\n        count: {\n          $sum: \"$count\"\n        },\n        models: {\n          $push: {\n            model: '$_id.model',\n            count: '$count',\n            colors: '$colors'\n          }\n        }\n      }\n    }])]);\n    opening = Object.assign({}, ...opening.map(ele => {\n      var model = ele[\"_id\"][\"model\"];\n      ele[\"colors\"] = Object.assign({}, ...ele[\"colors\"].map(e => {\n        var result = {};\n        result[e[\"color\"]] = e[\"count\"];\n        return result;\n      }));\n      var result = {};\n      result[model] = {\n        count: ele[\"count\"],\n        colors: ele[\"colors\"]\n      };\n      return result;\n    }));\n    sold = Object.assign({}, ...sold.map(ele => {\n      var model = ele[\"_id\"][\"model\"];\n      ele[\"colors\"] = Object.assign({}, ...ele[\"colors\"].map(e => {\n        var result = {};\n        result[e[\"color\"]] = e[\"count\"];\n        return result;\n      }));\n      var result = {};\n      result[model] = {\n        count: ele[\"count\"],\n        colors: ele[\"colors\"]\n      };\n      return result;\n    }));\n    closing = Object.assign({}, ...closing.map(ele => {\n      var model = ele[\"_id\"][\"model\"];\n      ele[\"colors\"] = Object.assign({}, ...ele[\"colors\"].map(e => {\n        var result = {};\n        result[e[\"color\"]] = e[\"count\"];\n        return result;\n      }));\n      var result = {};\n      result[model] = {\n        count: ele[\"count\"],\n        colors: ele[\"colors\"]\n      };\n      return result;\n    }));\n    received = Object.assign({}, ...received.map(ele => {\n      var model = ele[\"_id\"][\"model\"];\n      ele[\"colors\"] = Object.assign({}, ...ele[\"colors\"].map(e => {\n        var result = {};\n        result[e[\"color\"]] = e[\"count\"];\n        return result;\n      }));\n      var result = {};\n      result[model] = {\n        count: ele[\"count\"],\n        colors: ele[\"colors\"]\n      };\n      return result;\n    }));\n    var models = new Set([...Object.keys(opening), ...Object.keys(sold), ...Object.keys(closing), ...Object.keys(received)]);\n    var data = {};\n    data[\"saleInfo\"] = {};\n    data[\"saleInfo\"][\"daily\"] = Array.from(models).map(model => {\n      var res = {};\n      res[model] = {\n        \"counts\": [opening[model], sold[model], closing[model], received[model]],\n        \"colors\": Array.from(new Set([].concat(Object.keys(opening[model] ? opening[model][\"colors\"] : {} || {})).concat(Object.keys(sold[model] ? sold[model][\"colors\"] : {} || {})).concat(Object.keys(closing[model] ? closing[model][\"colors\"] : {} || {})).concat(Object.keys(received[model] ? received[model][\"colors\"] : {} || {}))))\n      };\n      return res;\n    });\n    data[\"saleInfo\"][\"daily\"] = Object.assign({}, ...data[\"saleInfo\"][\"daily\"]);\n    data[\"total\"] = {};\n    data[\"total\"][\"daily\"] = [await Unit.countDocuments({\n      entryDate: {\n        $lt: date\n      },\n      $or: [{\n        saleDate: {\n          $exists: false\n        }\n      }, {\n        saleDate: {\n          $gte: date\n        }\n      }]\n    }), await Unit.countDocuments({\n      saleDate: date\n    }), await Unit.countDocuments({\n      entryDate: {\n        $lte: date\n      },\n      $or: [{\n        saleDate: {\n          $exists: false\n        }\n      }, {\n        saleDate: {\n          $gt: date\n        }\n      }]\n    }), await Unit.countDocuments({\n      entryDate: date\n    })];\n    data[\"total\"][\"monthly\"] = [await Unit.countDocuments({\n      saleDate: {\n        $gte: new Date(date.getFullYear(), date.getMonth(), 1),\n        $lte: date\n      }\n    }), await Unit.countDocuments({\n      entryDate: {\n        $gte: new Date(date.getFullYear(), date.getMonth(), 1),\n        $lte: date\n      }\n    })];\n    data[\"saleTypes\"] = {};\n    data[\"saleTypes\"][\"daily\"] = Object.assign({}, ...saleTypes.map(ele => {\n      const saleType = ele[\"_id\"][\"saleType\"];\n      var result = {};\n      result[saleType] = ele[\"count\"];\n      return result;\n    }));\n    data[\"transactionTypes\"] = {};\n    data[\"transactionTypes\"][\"daily\"] = Object.assign({}, ...transactionTypes.map(ele => {\n      const saleType = ele[\"_id\"][\"transactionType\"];\n      var result = {};\n      result[saleType] = ele[\"count\"];\n      return result;\n    }));\n    data[\"checkpoints\"] = {};\n    data[\"checkpoints\"][\"daily\"] = Object.assign({}, ...checkpoints.map(ele => {\n      const saleType = ele[\"_id\"][\"checkpoint\"];\n      var result = {};\n      result[saleType] = ele[\"count\"];\n      return result;\n    }));\n    data[\"financeNames\"] = {};\n    data[\"financeNames\"][\"daily\"] = Object.assign({}, ...financeNames.map(ele => {\n      const saleType = ele[\"_id\"][\"financeName\"];\n      var result = {};\n      result[saleType] = ele[\"count\"];\n      return result;\n    }));\n    networkSold.push({\n      _id: {\n        checkpoint: 'counter'\n      },\n      models: counterSold.map(data => ({\n        model: data[\"_id\"][\"model\"],\n        count: data[\"count\"],\n        colors: data[\"colors\"]\n      })),\n      count: await Unit.countDocuments({\n        saleType: \"Counter\",\n        saleDate: date\n      })\n    });\n    data[\"networkSold\"] = {};\n    data[\"networkSold\"][\"daily\"] = Object.assign({}, ...networkSold.map(checkpointData => {\n      checkpointData[\"models\"] = Object.assign({}, ...checkpointData[\"models\"].map(modelData => {\n        var result = {};\n        modelData[\"colors\"] = Object.assign({}, ...modelData[\"colors\"].map(colorData => {\n          var result = {};\n          result[colorData[\"color\"]] = colorData[\"count\"];\n          return result;\n        }));\n        result[modelData[\"model\"]] = {\n          \"count\": modelData[\"count\"],\n          \"colors\": modelData[\"colors\"]\n        };\n        return result;\n      }));\n      var result = {};\n      result[checkpointData[\"_id\"][\"checkpoint\"]] = {\n        count: checkpointData[\"count\"],\n        models: checkpointData[\"models\"]\n      };\n      return result;\n    }));\n    [sold, received, transactionTypes, checkpoints, financeNames, saleTypes, counterSold, networkSold] = await Promise.all([Unit.aggregate([{\n      $match: {\n        saleDate: {\n          $gte: new Date(date.getFullYear(), date.getMonth(), 1),\n          $lte: date\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          model: '$model',\n          color: '$color'\n        },\n        count: {\n          $sum: 1\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          model: '$_id.model'\n        },\n        count: {\n          $sum: '$count'\n        },\n        colors: {\n          $push: {\n            color: '$_id.color',\n            count: '$count'\n          }\n        }\n      }\n    }]), Unit.aggregate([{\n      $match: {\n        entryDate: {\n          $gte: new Date(date.getFullYear(), date.getMonth(), 1),\n          $lte: date\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          model: '$model',\n          color: '$color'\n        },\n        count: {\n          $sum: 1\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          model: '$_id.model'\n        },\n        count: {\n          $sum: '$count'\n        },\n        colors: {\n          $push: {\n            color: '$_id.color',\n            count: '$count'\n          }\n        }\n      }\n    }]), Unit.aggregate([{\n      $match: {\n        saleDate: {\n          $gte: new Date(date.getFullYear(), date.getMonth(), 1),\n          $lte: date\n        },\n        transactionType: {\n          $nin: [null, \"\"]\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          transactionType: \"$transactionType\"\n        },\n        count: {\n          $sum: 1\n        }\n      }\n    }]), Unit.aggregate([{\n      $match: {\n        saleDate: {\n          $gte: new Date(date.getFullYear(), date.getMonth(), 1),\n          $lte: date\n        },\n        checkpoint: {\n          $nin: [null, \"\"]\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          checkpoint: \"$checkpoint\"\n        },\n        count: {\n          $sum: 1\n        }\n      }\n    }]), Unit.aggregate([{\n      $match: {\n        saleDate: {\n          $gte: new Date(date.getFullYear(), date.getMonth(), 1),\n          $lte: date\n        },\n        financeName: {\n          $nin: [null, \"\"]\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          financeName: \"$financeName\"\n        },\n        count: {\n          $sum: 1\n        }\n      }\n    }]), Unit.aggregate([{\n      $match: {\n        saleDate: {\n          $gte: new Date(date.getFullYear(), date.getMonth(), 1),\n          $lte: date\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          saleType: \"$saleType\"\n        },\n        count: {\n          $sum: 1\n        }\n      }\n    }]), Unit.aggregate([{\n      $match: {\n        saleDate: {\n          $gte: new Date(date.getFullYear(), date.getMonth(), 1),\n          $lte: date\n        },\n        saleType: \"Counter\"\n      }\n    }, {\n      $group: {\n        _id: {\n          model: '$model',\n          color: '$color'\n        },\n        count: {\n          $sum: 1\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          model: '$_id.model'\n        },\n        count: {\n          $sum: '$count'\n        },\n        colors: {\n          $push: {\n            color: '$_id.color',\n            count: '$count'\n          }\n        }\n      }\n    }]), Unit.aggregate([{\n      $match: {\n        saleDate: {\n          $gte: new Date(date.getFullYear(), date.getMonth(), 1),\n          $lte: date\n        },\n        saleType: \"Network\"\n      }\n    }, {\n      $group: {\n        _id: {\n          checkpoint: \"$checkpoint\",\n          color: \"$color\",\n          model: \"$model\"\n        },\n        count: {\n          $sum: 1\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          checkpoint: \"$_id.checkpoint\",\n          model: \"$_id.model\"\n        },\n        count: {\n          $sum: \"$count\"\n        },\n        colors: {\n          $push: {\n            color: '$_id.color',\n            count: '$count'\n          }\n        }\n      }\n    }, {\n      $group: {\n        _id: {\n          checkpoint: \"$_id.checkpoint\"\n        },\n        count: {\n          $sum: \"$count\"\n        },\n        models: {\n          $push: {\n            model: '$_id.model',\n            count: '$count',\n            colors: '$colors'\n          }\n        }\n      }\n    }])]);\n    sold = Object.assign({}, ...sold.map(ele => {\n      var model = ele[\"_id\"][\"model\"];\n      ele[\"colors\"] = Object.assign({}, ...ele[\"colors\"].map(e => {\n        var result = {};\n        result[e[\"color\"]] = e[\"count\"];\n        return result;\n      }));\n      var result = {};\n      result[model] = {\n        count: ele[\"count\"],\n        colors: ele[\"colors\"]\n      };\n      return result;\n    }));\n    received = Object.assign({}, ...received.map(ele => {\n      var model = ele[\"_id\"][\"model\"];\n      ele[\"colors\"] = Object.assign({}, ...ele[\"colors\"].map(e => {\n        var result = {};\n        result[e[\"color\"]] = e[\"count\"];\n        return result;\n      }));\n      var result = {};\n      result[model] = {\n        count: ele[\"count\"],\n        colors: ele[\"colors\"]\n      };\n      return result;\n    }));\n    models = new Set([...Object.keys(sold), ...Object.keys(received)]);\n    data[\"saleInfo\"][\"monthly\"] = Array.from(models).map(model => {\n      var result = {};\n      result[model] = {\n        \"counts\": [sold[model], received[model]],\n        \"colors\": Array.from(new Set([].concat(Object.keys(sold[model] ? sold[model][\"colors\"] : {} || {})).concat(Object.keys(received[model] ? received[model][\"colors\"] : {} || {}))))\n      };\n      return result;\n    });\n    data[\"saleInfo\"][\"monthly\"] = Object.assign({}, ...data[\"saleInfo\"][\"monthly\"]);\n    data[\"saleTypes\"][\"monthly\"] = Object.assign({}, ...saleTypes.map(ele => {\n      const saleType = ele[\"_id\"][\"saleType\"];\n      var result = {};\n      result[saleType] = ele[\"count\"];\n      return result;\n    }));\n    data[\"transactionTypes\"][\"monthly\"] = Object.assign({}, ...transactionTypes.map(ele => {\n      const saleType = ele[\"_id\"][\"transactionType\"];\n      var result = {};\n      result[saleType] = ele[\"count\"];\n      return result;\n    }));\n    data[\"checkpoints\"][\"monthly\"] = Object.assign({}, ...checkpoints.map(ele => {\n      const saleType = ele[\"_id\"][\"checkpoint\"];\n      var result = {};\n      result[saleType] = ele[\"count\"];\n      return result;\n    }));\n    data[\"financeNames\"][\"monthly\"] = Object.assign({}, ...financeNames.map(ele => {\n      const saleType = ele[\"_id\"][\"financeName\"];\n      var result = {};\n      result[saleType] = ele[\"count\"];\n      return result;\n    }));\n    networkSold.push({\n      _id: {\n        checkpoint: 'counter'\n      },\n      models: counterSold.map(data => ({\n        model: data[\"_id\"][\"model\"],\n        count: data[\"count\"],\n        colors: data[\"colors\"]\n      })),\n      count: await Unit.countDocuments({\n        saleType: \"Counter\",\n        saleDate: {\n          $gte: new Date(date.getFullYear(), date.getMonth(), 1),\n          $lte: date\n        }\n      })\n    });\n    data[\"networkSold\"][\"monthly\"] = await Object.assign({}, ...networkSold.map(checkpointData => {\n      checkpointData[\"models\"] = Object.assign({}, ...checkpointData[\"models\"].map(modelData => {\n        var result = {};\n        modelData[\"colors\"] = Object.assign({}, ...modelData[\"colors\"].map(colorData => {\n          var result = {};\n          result[colorData[\"color\"]] = colorData[\"count\"];\n          return result;\n        }));\n        result[modelData[\"model\"]] = {\n          \"count\": modelData[\"count\"],\n          \"colors\": modelData[\"colors\"]\n        };\n        return result;\n      }));\n      var result = {};\n      result[checkpointData[\"_id\"][\"checkpoint\"]] = {\n        count: checkpointData[\"count\"],\n        models: checkpointData[\"models\"]\n      };\n      return result;\n    }));\n    res.status(200).send(JSON.stringify(data));\n  } catch (error) {\n    res.status(502).send(error);\n  }\n});","map":{"version":3,"sources":["D:/code/stock_api/pages/api/units/saleinfo.ts"],"names":["Unit","req","res","date","String","query","Date","toString","opening","sold","closing","received","transactionTypes","checkpoints","financeNames","saleTypes","counterSold","networkSold","Promise","all","aggregate","$match","entryDate","$lt","$or","saleDate","$exists","$gte","$group","_id","model","color","count","$sum","colors","$push","$lte","$gt","transactionType","$nin","checkpoint","financeName","saleType","models","Object","assign","map","ele","e","result","Set","keys","data","Array","from","concat","countDocuments","getFullYear","getMonth","push","checkpointData","modelData","colorData","status","send","JSON","stringify","error"],"mappings":"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","sourcesContent":["import { NowRequest, NowResponse } from '@now/node'\r\nimport Unit from '../../../models/unit.model'\r\n\r\n\r\nexport default async (req: NowRequest, res: NowResponse) => {\r\n    try {\r\n        var date: any = new String(req.query.date);\r\n\r\n        date =  new Date(date.toString());\r\n\r\n        var [opening, sold, closing, received, transactionTypes, checkpoints, financeNames, saleTypes, counterSold, networkSold] = await Promise.all([\r\n            Unit.aggregate([\r\n                {\r\n                    $match: {\r\n                        entryDate: {$lt: date}, \r\n                        $or: [\r\n                            {saleDate: {$exists : false}},\r\n                            {saleDate: {$gte : date}}\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: {\r\n                            model: '$model',\r\n                            color: '$color'\r\n                        },\r\n                        count: { $sum: 1 }\r\n                    }\r\n                },\r\n                {\r\n                    $group : {\r\n                        _id: {\r\n                            model: '$_id.model'\r\n                        },\r\n                        count: { $sum: '$count' },\r\n                        colors: { \r\n                            $push : {\r\n                                color: '$_id.color',\r\n                                count: '$count'\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]),\r\n            Unit.aggregate([\r\n                {\r\n                    $match: {\r\n                        saleDate: date\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: {\r\n                            model: '$model',\r\n                            color: '$color'\r\n                        },\r\n                        count: { $sum: 1 }\r\n                    }\r\n                },\r\n                {\r\n                    $group : {\r\n                        _id: {\r\n                            model: '$_id.model'\r\n                        },\r\n                        count: { $sum: '$count' },\r\n                        colors: { \r\n                            $push : {\r\n                                color: '$_id.color',\r\n                                count: '$count'\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]),\r\n            Unit.aggregate([\r\n                {\r\n                    $match: {\r\n                        entryDate: {$lte: date}, \r\n                        $or: [\r\n                            {saleDate: {$exists : false}},\r\n                            {saleDate: {$gt: date}}\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: {\r\n                            model: '$model',\r\n                            color: '$color'\r\n                        },\r\n                        count: { $sum: 1 },\r\n        \r\n                    }\r\n                },\r\n                {\r\n                    $group : {\r\n                        _id: {\r\n                            model: '$_id.model'\r\n                        },\r\n                        count: { $sum: '$count' },\r\n                        colors: { \r\n                            $push : {\r\n                                color: '$_id.color',\r\n                                count: '$count'\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]),\r\n            Unit.aggregate([\r\n                {\r\n                    $match: {\r\n                        entryDate: date, \r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: {\r\n                            model: '$model',\r\n                            color: '$color'\r\n                        },\r\n                        count: { $sum: 1 }\r\n                    }\r\n                },\r\n                {\r\n                    $group : {\r\n                        _id: {\r\n                            model: '$_id.model'\r\n                        },\r\n                        count: { $sum: '$count' },\r\n                        colors: { \r\n                            $push : {\r\n                                color: '$_id.color',\r\n                                count: '$count'\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]),\r\n            Unit.aggregate([\r\n                {\r\n                    $match: {\r\n                        saleDate: date, \r\n                        transactionType: {$nin: [null, \"\"],} \r\n                    }\r\n                },\r\n                {\r\n                    $group : {\r\n                        _id : {\r\n                            transactionType: \"$transactionType\"\r\n                        },\r\n                        count: { $sum: 1 }\r\n                    }\r\n                }\r\n            ]),\r\n            Unit.aggregate([\r\n                {\r\n                    $match: {\r\n                        saleDate: date, \r\n                        checkpoint: {$nin: [null, \"\"],} \r\n                    }\r\n                },\r\n                {\r\n                    $group : {\r\n                        _id : {\r\n                            checkpoint: \"$checkpoint\"\r\n                        },\r\n                        count: { $sum: 1 }\r\n                    }\r\n                }\r\n            ]),\r\n            Unit.aggregate([\r\n                {\r\n                    $match: {\r\n                        saleDate: date, \r\n                        financeName: {$nin: [null, \"\"],} \r\n                    }\r\n                },\r\n                {\r\n                    $group : {\r\n                        _id : {\r\n                            financeName: \"$financeName\"\r\n                        },\r\n                        count: { $sum: 1 }\r\n                    }\r\n                }\r\n            ]),\r\n            Unit.aggregate([\r\n                {\r\n                    $match: {\r\n                        saleDate: date, \r\n                    }\r\n                },\r\n                {\r\n                    $group : {\r\n                        _id : {\r\n                            saleType: \"$saleType\"\r\n                        },\r\n                        count: { $sum: 1 }\r\n                    }\r\n                }\r\n            ]),\r\n            Unit.aggregate([\r\n                {\r\n                    $match: {\r\n                        saleDate: date,\r\n                        saleType: \"Counter\"\r\n                    }\r\n                },\r\n                {\r\n                    \r\n                    $group: {\r\n                        _id: {\r\n                            model: '$model',\r\n                            color: '$color'\r\n                        },\r\n                        count: { $sum: 1 }\r\n                    }\r\n                },\r\n                {\r\n                    $group : {\r\n                        _id: {\r\n                            model: '$_id.model'\r\n                        },\r\n                        count: { $sum: '$count' },\r\n                        colors: { \r\n                            $push : {\r\n                                color: '$_id.color',\r\n                                count: '$count'\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]),\r\n            Unit.aggregate([\r\n                {\r\n                    $match: {\r\n                        saleDate: date,\r\n                        saleType: \"Network\"\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: {\r\n                            checkpoint: \"$checkpoint\",\r\n                            color: \"$color\",\r\n                            model: \"$model\",\r\n                        },\r\n                        count : { $sum : 1 },\r\n                    }\r\n                }, \r\n                {\r\n                    $group: {\r\n                        _id: {\r\n                            checkpoint: \"$_id.checkpoint\",\r\n                            model: \"$_id.model\",\r\n                        },\r\n                        count : { $sum : \"$count\" },\r\n                        colors: { \r\n                            $push : {\r\n                                color: '$_id.color',\r\n                                count: '$count'\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: {\r\n                            checkpoint: \"$_id.checkpoint\",\r\n                        },\r\n                        count : { $sum : \"$count\" },\r\n                        models: { \r\n                            $push : {\r\n                                model: '$_id.model',\r\n                                count: '$count',\r\n                                colors: '$colors'\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n            ])\r\n        ]);\r\n\r\n        opening = Object.assign({}, ...opening.map(ele => {\r\n            var model = ele[\"_id\"][\"model\"];\r\n            ele[\"colors\"] = Object.assign({}, ...ele[\"colors\"].map(e => {\r\n                var result = {};\r\n                result[e[\"color\"]] = e[\"count\"];\r\n                return result;\r\n            }));\r\n            var result = {};\r\n            result[model] = {\r\n                count: ele[\"count\"],\r\n                colors: ele[\"colors\"]\r\n            };\r\n            return result;\r\n        }));\r\n\r\n        sold = Object.assign({}, ...sold.map(ele => {\r\n            var model = ele[\"_id\"][\"model\"];\r\n            ele[\"colors\"] = Object.assign({}, ...ele[\"colors\"].map(e => {\r\n                var result = {};\r\n                result[e[\"color\"]] = e[\"count\"];\r\n                return result;\r\n            }));\r\n            var result = {};\r\n            result[model] = {\r\n                count: ele[\"count\"],\r\n                colors: ele[\"colors\"]\r\n            };\r\n            return result;\r\n        }));\r\n\r\n        closing = Object.assign({}, ...closing.map(ele => {\r\n            var model = ele[\"_id\"][\"model\"];\r\n            ele[\"colors\"] = Object.assign({}, ...ele[\"colors\"].map(e => {\r\n                var result = {};\r\n                result[e[\"color\"]] = e[\"count\"];\r\n                return result;\r\n            }));\r\n            var result = {};\r\n            result[model] = {\r\n                count: ele[\"count\"],\r\n                colors: ele[\"colors\"]\r\n            };\r\n            return result;\r\n        }));\r\n\r\n        received = Object.assign({}, ...received.map(ele => {\r\n            var model = ele[\"_id\"][\"model\"];\r\n            ele[\"colors\"] = Object.assign({}, ...ele[\"colors\"].map(e => {\r\n                var result = {};\r\n                result[e[\"color\"]] = e[\"count\"];\r\n                return result;\r\n            }));\r\n            var result = {};\r\n            result[model] = {\r\n                count: ele[\"count\"],\r\n                colors: ele[\"colors\"]\r\n            };\r\n            return result;\r\n        }));\r\n\r\n        var models = new Set([\r\n            ...Object.keys(opening),\r\n            ...Object.keys(sold),\r\n            ...Object.keys(closing),\r\n            ...Object.keys(received)\r\n        ]);\r\n\r\n        var data = {};\r\n\r\n        data[\"saleInfo\"] = {};\r\n\r\n        data[\"saleInfo\"][\"daily\"] = Array.from(models).map(model => {\r\n            var res = {}\r\n            res[model] = {\r\n                \"counts\": [\r\n                    opening[model],\r\n                    sold[model],\r\n                    closing[model],\r\n                    received[model]\r\n                ],\r\n                \"colors\": Array.from(new Set([]\r\n                    .concat(Object.keys(opening[model] ? opening[model][\"colors\"] : {} || {}))\r\n                    .concat(Object.keys(sold[model] ? sold[model][\"colors\"] : {} || {}))\r\n                    .concat(Object.keys(closing[model] ? closing[model][\"colors\"] : {} || {}))\r\n                    .concat(Object.keys(received[model] ? received[model][\"colors\"] : {} || {}))))\r\n            }\r\n            return res;\r\n        });\r\n\r\n        data[\"saleInfo\"][\"daily\"] = Object.assign({}, ...data[\"saleInfo\"][\"daily\"]);\r\n\r\n        data[\"total\"] = {}\r\n        data[\"total\"][\"daily\"] = [\r\n            await Unit.countDocuments({\r\n                entryDate: {$lt: date}, \r\n                $or: [\r\n                    {saleDate: {$exists : false}},\r\n                    {saleDate: {$gte : date}}\r\n                ]\r\n            }),\r\n            await Unit.countDocuments({\r\n                saleDate: date\r\n            }),\r\n            await Unit.countDocuments({\r\n                entryDate: {$lte: date}, \r\n                    $or: [\r\n                        {saleDate: {$exists : false}},\r\n                        {saleDate: {$gt: date}}\r\n                    ]\r\n            }),\r\n            await Unit.countDocuments({\r\n                entryDate: date, \r\n            })\r\n        ];\r\n\r\n    \r\n        data [\"total\"][\"monthly\"] = [await Unit.countDocuments({\r\n            saleDate: {\r\n                $gte: new Date(date.getFullYear(), date.getMonth(), 1),\r\n                $lte: date\r\n            }\r\n        }),\r\n        await Unit.countDocuments({\r\n            entryDate: {\r\n                $gte: new Date(date.getFullYear(), date.getMonth(), 1),\r\n                $lte: date\r\n            }\r\n        }),\r\n    ];\r\n\r\n        data[\"saleTypes\"] = {};\r\n        data[\"saleTypes\"][\"daily\"] = Object.assign({}, ...saleTypes.map(ele => {\r\n            const saleType = ele[\"_id\"][\"saleType\"];\r\n            var result = {};\r\n            result[saleType] = ele[\"count\"];\r\n            return result;\r\n        }));\r\n\r\n        data[\"transactionTypes\"] = {};\r\n        data[\"transactionTypes\"][\"daily\"] = Object.assign({}, ...transactionTypes.map(ele => {\r\n            const saleType = ele[\"_id\"][\"transactionType\"];\r\n            var result = {};\r\n            result[saleType] = ele[\"count\"];\r\n            return result;\r\n        }));\r\n\r\n        data[\"checkpoints\"] = {};\r\n        data[\"checkpoints\"][\"daily\"] = Object.assign({}, ...checkpoints.map(ele => {\r\n            const saleType = ele[\"_id\"][\"checkpoint\"];\r\n            var result = {};\r\n            result[saleType] = ele[\"count\"];\r\n            return result;\r\n        }));\r\n\r\n        data[\"financeNames\"] = {}\r\n        data[\"financeNames\"][\"daily\"] = Object.assign({}, ...financeNames.map(ele => {\r\n            const saleType = ele[\"_id\"][\"financeName\"];\r\n            var result = {};\r\n            result[saleType] = ele[\"count\"];\r\n            return result;\r\n        }));\r\n\r\n        networkSold.push({\r\n            _id: { checkpoint: 'counter' },\r\n            models: counterSold.map(data => ({\r\n                model: data[\"_id\"][\"model\"],\r\n                count: data[\"count\"],\r\n                colors: data[\"colors\"]\r\n            })),\r\n            count: await Unit.countDocuments({\r\n                saleType: \"Counter\",\r\n                saleDate: date,\r\n            })\r\n        });\r\n\r\n        data[\"networkSold\"] = {}\r\n        data[\"networkSold\"][\"daily\"] = Object.assign({}, ...networkSold.map(checkpointData => {\r\n            checkpointData[\"models\"] = Object.assign({}, ...checkpointData[\"models\"].map(modelData => {\r\n                var result = {};\r\n                modelData[\"colors\"] = Object.assign({}, ...modelData[\"colors\"].map(colorData => {\r\n                    var result = {};\r\n                    result[colorData[\"color\"]] = colorData[\"count\"];\r\n                    return result;\r\n                }))\r\n                result[modelData[\"model\"]] = {\r\n                    \"count\": modelData[\"count\"],\r\n                    \"colors\": modelData[\"colors\"],\r\n                };\r\n                return result;\r\n            }));\r\n            var result = {};\r\n            result[checkpointData[\"_id\"][\"checkpoint\"]] = {\r\n                count: checkpointData[\"count\"],\r\n                models: checkpointData[\"models\"]\r\n            };\r\n            \r\n            return result;\r\n        }));\r\n\r\n        [sold, received, transactionTypes, checkpoints, financeNames, saleTypes, counterSold, networkSold] = await Promise.all([\r\n            Unit.aggregate([\r\n                {\r\n                    $match: {\r\n                        saleDate: {\r\n                            $gte: new Date(date.getFullYear(), date.getMonth(), 1),\r\n                            $lte: date\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: {\r\n                            model: '$model',\r\n                            color: '$color'\r\n                        },\r\n                        count: { $sum: 1 }\r\n                    }\r\n                },\r\n                {\r\n                    $group : {\r\n                        _id: {\r\n                            model: '$_id.model'\r\n                        },\r\n                        count: { $sum: '$count' },\r\n                        colors: { \r\n                            $push : {\r\n                                color: '$_id.color',\r\n                                count: '$count'\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]),\r\n            Unit.aggregate([\r\n                {\r\n                    $match: {\r\n                        entryDate: {\r\n                            $gte: new Date(date.getFullYear(), date.getMonth(), 1),\r\n                            $lte: date\r\n                        }, \r\n                    }\r\n                },\r\n                {\r\n                    \r\n                    $group: {\r\n                        _id: {\r\n                            model: '$model',\r\n                            color: '$color'\r\n                        },\r\n                        count: { $sum: 1 }\r\n                    }\r\n                },\r\n                {\r\n                    $group : {\r\n                        _id: {\r\n                            model: '$_id.model'\r\n                        },\r\n                        count: { $sum: '$count' },\r\n                        colors: { \r\n                            $push : {\r\n                                color: '$_id.color',\r\n                                count: '$count'\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]),\r\n            Unit.aggregate([\r\n                {\r\n                    $match: {\r\n                        saleDate: {\r\n                            $gte: new Date(date.getFullYear(), date.getMonth(), 1),\r\n                            $lte: date\r\n                        }, \r\n                        transactionType: {$nin: [null, \"\"],} \r\n                    }\r\n                },\r\n                {\r\n                    $group : {\r\n                        _id : {\r\n                            transactionType: \"$transactionType\"\r\n                        },\r\n                        count: { $sum: 1 }\r\n                    }\r\n                }\r\n            ]),\r\n            Unit.aggregate([\r\n                {\r\n                    $match: {\r\n                        saleDate: {\r\n                            $gte: new Date(date.getFullYear(), date.getMonth(), 1),\r\n                            $lte: date\r\n                        }, \r\n                        checkpoint: {$nin: [null, \"\"],}\r\n                    }\r\n                },\r\n                {\r\n                    $group : {\r\n                        _id : {\r\n                            checkpoint: \"$checkpoint\"\r\n                        },\r\n                        count: { $sum: 1 }\r\n                    }\r\n                }\r\n            ]),\r\n            Unit.aggregate([\r\n                {\r\n                    $match: {\r\n                        saleDate: {\r\n                            $gte: new Date(date.getFullYear(), date.getMonth(), 1),\r\n                            $lte: date\r\n                        }, \r\n                        financeName: {$nin: [null, \"\"],}\r\n                    }\r\n                },\r\n                {\r\n                    $group : {\r\n                        _id : {\r\n                            financeName: \"$financeName\"\r\n                        },\r\n                        count: { $sum: 1 }\r\n                    }\r\n                }\r\n            ]),\r\n            Unit.aggregate([\r\n                {\r\n                    $match: {\r\n                        saleDate: {\r\n                            $gte: new Date(date.getFullYear(), date.getMonth(), 1),\r\n                            $lte: date\r\n                        }, \r\n                    }\r\n                },\r\n                {\r\n                    $group : {\r\n                        _id : {\r\n                            saleType: \"$saleType\"\r\n                        },\r\n                        count: { $sum: 1 }\r\n                    }\r\n                }\r\n            ]),\r\n            Unit.aggregate([\r\n                {\r\n                    $match: {\r\n                        saleDate: {\r\n                            $gte: new Date(date.getFullYear(), date.getMonth(), 1),\r\n                            $lte: date\r\n                        },\r\n                        saleType: \"Counter\"\r\n                    }\r\n                },\r\n                {\r\n                    \r\n                    $group: {\r\n                        _id: {\r\n                            model: '$model',\r\n                            color: '$color'\r\n                        },\r\n                        count: { $sum: 1 }\r\n                    }\r\n                },\r\n                {\r\n                    $group : {\r\n                        _id: {\r\n                            model: '$_id.model'\r\n                        },\r\n                        count: { $sum: '$count' },\r\n                        colors: { \r\n                            $push : {\r\n                                color: '$_id.color',\r\n                                count: '$count'\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]),\r\n            Unit.aggregate([\r\n                {\r\n                    $match: {\r\n                        saleDate: {\r\n                            $gte: new Date(date.getFullYear(), date.getMonth(), 1),\r\n                            $lte: date\r\n                        },\r\n                        saleType: \"Network\"\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: {\r\n                            checkpoint: \"$checkpoint\",\r\n                            color: \"$color\",\r\n                            model: \"$model\",\r\n                        },\r\n                        count : { $sum : 1 },\r\n                    }\r\n                }, \r\n                {\r\n                    $group: {\r\n                        _id: {\r\n                            checkpoint: \"$_id.checkpoint\",\r\n                            model: \"$_id.model\",\r\n                        },\r\n                        count : { $sum : \"$count\" },\r\n                        colors: { \r\n                            $push : {\r\n                                color: '$_id.color',\r\n                                count: '$count'\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: {\r\n                            checkpoint: \"$_id.checkpoint\",\r\n                        },\r\n                        count : { $sum : \"$count\" },\r\n                        models: { \r\n                            $push : {\r\n                                model: '$_id.model',\r\n                                count: '$count',\r\n                                colors: '$colors'\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n            ])\r\n        ]);\r\n        \r\n        sold = Object.assign({}, ...sold.map(ele => {\r\n            var model = ele[\"_id\"][\"model\"];\r\n            ele[\"colors\"] = Object.assign({}, ...ele[\"colors\"].map(e => {\r\n                var result = {};\r\n                result[e[\"color\"]] = e[\"count\"];\r\n                return result;\r\n            }));\r\n            var result = {};\r\n            result[model] = {\r\n                count: ele[\"count\"],\r\n                colors: ele[\"colors\"]\r\n            };\r\n            return result;\r\n        }));\r\n        \r\n        received = Object.assign({}, ...received.map(ele => {\r\n            var model = ele[\"_id\"][\"model\"];\r\n            ele[\"colors\"] = Object.assign({}, ...ele[\"colors\"].map(e => {\r\n                var result = {};\r\n                result[e[\"color\"]] = e[\"count\"];\r\n                return result;\r\n            }));\r\n            var result = {};\r\n            result[model] = {\r\n                count: ele[\"count\"],\r\n                colors: ele[\"colors\"]\r\n            };\r\n            return result;\r\n        }));\r\n            \r\n        models = new Set([\r\n            ...Object.keys(sold),\r\n            ...Object.keys(received)\r\n        ]);\r\n\r\n        data[\"saleInfo\"][\"monthly\"] = Array.from(models).map(model => {\r\n            var result = {}\r\n            result[model] = {\r\n                \"counts\": [\r\n                    sold[model],\r\n                    received[model]\r\n                ],\r\n                \"colors\": Array.from(new Set([]\r\n                    .concat(Object.keys(sold[model] ? sold[model][\"colors\"] : {} || {}))\r\n                    .concat(Object.keys(received[model] ? received[model][\"colors\"] : {} || {}))))\r\n            }\r\n            return result;\r\n        });\r\n\r\n        data[\"saleInfo\"][\"monthly\"] = Object.assign({}, ...data[\"saleInfo\"][\"monthly\"]);\r\n\r\n        data[\"saleTypes\"][\"monthly\"] = Object.assign({}, ...saleTypes.map(ele => {\r\n            const saleType = ele[\"_id\"][\"saleType\"];\r\n            var result = {};\r\n            result[saleType] = ele[\"count\"];\r\n            return result;\r\n        }));\r\n\r\n        data[\"transactionTypes\"][\"monthly\"] = Object.assign({}, ...transactionTypes.map(ele => {\r\n            const saleType = ele[\"_id\"][\"transactionType\"];\r\n            var result = {};\r\n            result[saleType] = ele[\"count\"];\r\n            return result;\r\n        }));\r\n\r\n        data[\"checkpoints\"][\"monthly\"] = Object.assign({}, ...checkpoints.map(ele => {\r\n            const saleType = ele[\"_id\"][\"checkpoint\"];\r\n            var result = {};\r\n            result[saleType] = ele[\"count\"];\r\n            return result;\r\n        }));\r\n\r\n        data[\"financeNames\"][\"monthly\"] = Object.assign({}, ...financeNames.map(ele => {\r\n            const saleType = ele[\"_id\"][\"financeName\"];\r\n            var result = {};\r\n            result[saleType] = ele[\"count\"];\r\n            return result;\r\n        }));\r\n\r\n        networkSold.push({\r\n            _id: { checkpoint: 'counter' },\r\n            models: counterSold.map(data => ({\r\n                model: data[\"_id\"][\"model\"],\r\n                count: data[\"count\"],\r\n                colors: data[\"colors\"]\r\n            })),\r\n            count: await Unit.countDocuments({\r\n                saleType: \"Counter\",\r\n                saleDate: {\r\n                            $gte: new Date(date.getFullYear(), date.getMonth(), 1),\r\n                            $lte: date\r\n                        },\r\n            })\r\n        });\r\n\r\n        data[\"networkSold\"][\"monthly\"] = await Object.assign({}, ...networkSold.map(checkpointData => {\r\n            checkpointData[\"models\"] = Object.assign({}, ...checkpointData[\"models\"].map(modelData => {\r\n                var result = {};\r\n                modelData[\"colors\"] = Object.assign({}, ...modelData[\"colors\"].map(colorData => {\r\n                    var result = {};\r\n                    result[colorData[\"color\"]] = colorData[\"count\"];\r\n                    return result;\r\n                }))\r\n                result[modelData[\"model\"]] = {\r\n                    \"count\": modelData[\"count\"],\r\n                    \"colors\": modelData[\"colors\"],\r\n                };\r\n                return result;\r\n            }));\r\n            var result = {};\r\n            result[checkpointData[\"_id\"][\"checkpoint\"]] = {\r\n                count: checkpointData[\"count\"],\r\n                models: checkpointData[\"models\"]\r\n            };\r\n            return result;\r\n        }));\r\n\r\n        res.status(200).send(JSON.stringify(data));\r\n    } catch (error) {\r\n        res.status(502).send(error);\r\n    }\r\n  \r\n}"]},"metadata":{},"sourceType":"module"}